{"ast":null,"code":"import { ChatParticipantActions } from 'src/app/chat-participant/state/chat-participant.actions';\nimport { Subscription } from 'rxjs';\nimport { selectChatParticipants } from 'src/app/chat-participant/state/chat-participant.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"./shared/layout/navbar/navbar.component\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(router, store) {\n      this.router = router;\n      this.store = store;\n      this.title = 'Chat';\n      this.isDisabled = true;\n      this.model = 'seiji';\n      this.chatParticipants$ = this.store.select(selectChatParticipants());\n      this.chatParticipants = [];\n      this.chatParticipantsToDelete = [];\n      this.subscription = Subscription.EMPTY;\n    }\n\n    ngOnInit() {\n      this.store.dispatch({\n        type: ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST\n      });\n      this.assignChatParticipants();\n      this.deleteTooOldPosts(); //A JavaScript event listener that listens for the storage event, which is triggered\n      //when there are changes to localStorage or sessionStorage in the browser.\n\n      window.addEventListener('storage', event => {\n        if (event.storageArea == localStorage) {\n          let token = localStorage.getItem('token');\n\n          if (token == undefined || !localStorage.getItem('userEmail')) {\n            // DO LOGOUT FROM THIS TAB AS WELL\n            this.router.navigate(['/login']);\n          }\n\n          if (localStorage.getItem(\"mainPage\") == \"true\" && localStorage.getItem(\"refresh\") == 'true') {\n            this.deleteTooOldPosts();\n            this.store.dispatch({\n              type: ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST\n            });\n          }\n        }\n      }, false);\n    }\n\n    deleteTooOldPosts() {\n      if (this.chatParticipants != undefined && this.chatParticipants.length > 0) {\n        this.chatParticipantsToDelete = this.chatParticipants.filter(data => data.createdAt.slice(0, 13) != new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate(), new Date().getUTCHours(), new Date().getUTCMinutes(), new Date().getUTCSeconds())).toISOString().replace(\"T\", \" \").slice(0, 13));\n\n        for (let i = 0; i < this.chatParticipantsToDelete.length; i++) {\n          this.store.dispatch({\n            type: ChatParticipantActions.REMOVE_CHAT_PARTICIPANT_API,\n            payload: this.chatParticipantsToDelete[i].id\n          });\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n    assignChatParticipants() {\n      this.subscription = this.chatParticipants$.subscribe(data => {\n        for (let i = 0; i < data.length; i++) {\n          //just works, deletes not demanded undefined objects\n          if (data[i].createdAt == undefined || data[i].createdAt == null) data.splice(i, 1);\n        }\n\n        if (data) this.chatParticipants = data;\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Store));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"container\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-navbar\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelement(2, \"router-outlet\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i3.NavbarComponent, i1.RouterOutlet],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}