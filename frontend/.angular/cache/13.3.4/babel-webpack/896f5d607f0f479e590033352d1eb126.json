{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/chat-participant.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/button\";\n\nfunction ChatParticipantFormComponent_mat_card_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\", 1)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 2)(4, \"mat-form-field\", 3)(5, \"mat-label\");\n    i0.ɵɵtext(6, \"Speaker\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"input\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-form-field\", 3)(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Content\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 6)(13, \"mat-form-field\", 3)(14, \"mat-label\");\n    i0.ɵɵtext(15, \"CreatedAt\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"mat-form-field\", 3)(18, \"mat-label\");\n    i0.ɵɵtext(19, \"ChatWith\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"input\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ChatParticipantFormComponent_mat_card_0_Template_button_click_21_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.emitAction();\n    });\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(23, \" \\u00A0 \");\n    i0.ɵɵelementStart(24, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function ChatParticipantFormComponent_mat_card_0_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.clear();\n    });\n    i0.ɵɵtext(25, \" Clear \");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.selectedChatParticipant ? \"Update/View Speaker\" : \"Create Speaker\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.form);\n    i0.ɵɵadvance(19);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.actionButtonLabel, \" \");\n  }\n}\n\nexport let ChatParticipantFormComponent = /*#__PURE__*/(() => {\n  class ChatParticipantFormComponent {\n    constructor(fb, chatParticipantService) {\n      this.fb = fb;\n      this.selectedChatParticipant = null;\n      this.actionButtonLabel = 'Create';\n      this.action = new EventEmitter();\n      this.temp = new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate(), new Date().getUTCHours(), new Date().getUTCMinutes(), new Date().getUTCSeconds())).toISOString();\n      this.temp2 = this.temp.replace(\"T\", \" \");\n      this.temp3 = this.temp2.slice(0, 19);\n      this.temp4 = this.temp3 + \" UTC\";\n      this.isVisibleForm = false;\n      this.chatParticipantService = chatParticipantService;\n      this.form = this.fb.group({\n        id: [''],\n        speaker: [{\n          value: localStorage.getItem('userEmail'),\n          disabled: true\n        }],\n        talkContent: [''],\n        createdAt: [{\n          value: this.temp4,\n          disabled: true\n        }],\n        chatWith: [{}]\n      });\n    }\n\n    ngOnInit() {\n      this.form.value.createdAt = this.temp4; //for initialization with not undefined\n\n      localStorage.setItem('createdAt', this.form.value.createdAt);\n      this.checkAction();\n    }\n\n    checkAction() {\n      if (this.selectedChatParticipant) {\n        this.actionButtonLabel = \"Update\";\n        this.patchDataValues();\n      } else {\n        console.log(\"chatWith: \", this.chatParticipantService.chatWith);\n        this.form.patchValue({\n          chatWith: this.chatParticipantService.chatWith\n        });\n        this.form.controls['chatWith'].disable();\n        console.log(\"chatWith in form: \", this.form.value.chatWith.value);\n      }\n\n      this.isVisibleForm = true;\n    }\n\n    patchDataValues() {\n      if (this.selectedChatParticipant) {\n        this.form.patchValue(this.selectedChatParticipant);\n        this.form.controls['chatWith'].disable();\n      }\n\n      if (this.selectedChatParticipant != null && this.selectedChatParticipant.createdAt != undefined) localStorage.setItem('createdAt', this.selectedChatParticipant.createdAt); //for update\n    }\n\n    emitAction() {\n      var _a;\n\n      this.form.value.speaker = localStorage.getItem('userEmail');\n      this.form.value.createdAt = localStorage.getItem('createdAt');\n      if (this.actionButtonLabel == \"Update\") this.form.value.chatWith = (_a = this.selectedChatParticipant) === null || _a === void 0 ? void 0 : _a.chatWith;else this.form.value.chatWith = this.chatParticipantService.chatWith;\n      this.chatParticipantService.chatWith = this.form.value.chatWith;\n      localStorage.removeItem('createdAt');\n      this.action.emit({\n        value: this.form.value,\n        action: this.actionButtonLabel\n      });\n    }\n\n    clear() {\n      this.form.controls['talkContent'].setValue('');\n    }\n\n  }\n\n  ChatParticipantFormComponent.ɵfac = function ChatParticipantFormComponent_Factory(t) {\n    return new (t || ChatParticipantFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ChatParticipantService));\n  };\n\n  ChatParticipantFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatParticipantFormComponent,\n    selectors: [[\"app-chat-participant-form\"]],\n    inputs: {\n      selectedChatParticipant: \"selectedChatParticipant\",\n      actionButtonLabel: \"actionButtonLabel\"\n    },\n    outputs: {\n      action: \"action\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"form-card\", 4, \"ngIf\"], [1, \"form-card\"], [1, \"chat-participant-form\", 3, \"formGroup\"], [\"appearance\", \"fill\", 1, \"example-full-width\"], [\"matInput\", \"\", \"formControlName\", \"speaker\", \"placeholder\", \"Ex. karol@mail4.com\"], [\"matInput\", \"\", \"formControlName\", \"talkContent\", \"placeholder\", \"Ex. Hello!\"], [1, \"button-group\"], [\"matInput\", \"\", \"formControlName\", \"createdAt\", \"placeholder\", \"Ex. 2024-06-03 13:20:00 UTC\"], [\"matInput\", \"\", \"formControlName\", \"chatWith\", \"placeholder\", \"Ex. student@mail.com\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"]],\n    template: function ChatParticipantFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ChatParticipantFormComponent_mat_card_0_Template, 26, 3, \"mat-card\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isVisibleForm);\n      }\n    },\n    directives: [i3.NgIf, i4.MatCard, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i7.MatButton],\n    styles: [\".chat-participant-form[_ngcontent-%COMP%]{min-width:500px;max-width:800px;width:100%}.example-full-width[_ngcontent-%COMP%]{width:100%}.form-card[_ngcontent-%COMP%]{min-width:500px;max-width:800px;margin:auto}.button-group[_ngcontent-%COMP%]{margin-bottom:15px}.button-group[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:10px;float:right}\"]\n  });\n  return ChatParticipantFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}