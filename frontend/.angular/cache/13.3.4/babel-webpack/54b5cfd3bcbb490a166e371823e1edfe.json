{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormGroup, FormControl } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/chat-participant.service\";\nimport * as i2 from \"@angular/material/table\";\nimport * as i3 from \"@angular/material/sort\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/forms\";\n\nfunction ChatParticipantListComponent_ng_container_1_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r6.headerName, \" \");\n  }\n}\n\nfunction ChatParticipantListComponent_ng_container_1_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r10 = ctx.$implicit;\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r10[item_r6.fieldName], \" \");\n  }\n}\n\nfunction ChatParticipantListComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 12);\n    i0.ɵɵtemplate(1, ChatParticipantListComponent_ng_container_1_th_1_Template, 2, 1, \"th\", 13);\n    i0.ɵɵtemplate(2, ChatParticipantListComponent_ng_container_1_td_2_Template, 2, 1, \"td\", 14);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", item_r6.fieldName);\n  }\n}\n\nfunction ChatParticipantListComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 17);\n    i0.ɵɵtext(1, \" Actions \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatParticipantListComponent_td_4_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_td_4_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const element_r12 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.selectChatParticipant(element_r12, 0);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"pageview\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" View \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatParticipantListComponent_td_4_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_td_4_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const element_r12 = i0.ɵɵnextContext().$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.selectChatParticipant(element_r12, 1);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" Delete \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatParticipantListComponent_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵtemplate(1, ChatParticipantListComponent_td_4_button_1_Template, 4, 0, \"button\", 19);\n    i0.ɵɵtext(2, \" \\u00A0 \");\n    i0.ɵɵtemplate(3, ChatParticipantListComponent_td_4_button_3_Template, 4, 0, \"button\", 20);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r12 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getViewAndDeleteIfTrue(element_r12));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getViewAndDeleteIfTrue(element_r12));\n  }\n}\n\nfunction ChatParticipantListComponent_tr_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 23);\n  }\n}\n\nfunction ChatParticipantListComponent_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 24);\n  }\n}\n\nfunction ChatParticipantListComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.createChat();\n    });\n    i0.ɵɵtext(1, \"Create chat\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ChatParticipantListComponent = /*#__PURE__*/(() => {\n  class ChatParticipantListComponent {\n    constructor(chatParticipantService) {\n      this.headers = [];\n      this.chatParticipants = [];\n      this.chatParticipant = new EventEmitter();\n      this.headerFields = [];\n      this.users = [];\n      this.userEmails = [];\n      this.personForm = new FormGroup({\n        name: new FormControl()\n      });\n      this.found = false;\n      this.chatParticipantService = chatParticipantService;\n    }\n\n    ngOnChanges() {\n      //input is loading some time,here chatParticipants are not empty already after ngOnInit\n      if (this.chatParticipants != undefined && this.chatParticipants) {\n        let chatParticipantNotToDelete = this.chatParticipants.filter(data => {\n          return data.createdAt.slice(0, 13) == new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate(), new Date().getUTCHours(), new Date().getUTCMinutes(), new Date().getUTCSeconds())).toISOString().replace(\"T\", \" \").slice(0, 13);\n        }); //chatParticipantNotToDelete=chatParticipantNotToDelete.filter((data: ChatParticipant) =>{return (data.speaker==localStorage.getItem(\"userEmail\") && data.chatWith==this.personForm.controls['name'].value)})\n\n        this.dataSource = new MatTableDataSource(chatParticipantNotToDelete);\n        this.dataSource.sort = this.sort;\n        this.chatParticipantService.getUsers().subscribe(data => {\n          this.users = data;\n        });\n        let j = 0;\n\n        for (let user of this.users) {\n          this.userEmails[j] = user.email;\n          j++;\n        } //console.log(\"ch:\",this.chatParticipants);\n\n\n        for (var i = 0; i < this.chatParticipants.length; i++) {\n          if (this.chatParticipants[i].speaker == localStorage.getItem(\"userEmail\")) {\n            console.log(\"ChatWith in chat:\", this.chatParticipants[i].chatWith);\n\n            if (localStorage.getItem('userEmail') == this.chatParticipants[i].speaker && (this.chatParticipants[i].chatWith == null || this.chatParticipants[i].chatWith.length == 0)) {\n              this.chatParticipants[i].chatWith = this.personForm.controls['name'].value; //this.chatParticipantService.chatWith=this.personForm.controls['name'].value;\n\n              this.chatParticipantService.updateChatParticipant(this.chatParticipants[i].id, this.chatParticipants[i]);\n            } //this.personForm.reset();\n            //this.found=false;\n            //console.log(\"ch2\",this.chatParticipants);\n\n          }\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.getHeaderFields();\n    }\n\n    getHeaderFields() {\n      this.headerFields = this.headers.map(data => data.fieldName);\n      this.headerFields.push(\"actions\");\n    }\n\n    selectChatParticipant(chatParticipant, action) {\n      if (action == 0 && localStorage.getItem('userEmail') == chatParticipant.speaker || action == 1) this.chatParticipant.emit({\n        chatParticipant,\n        action\n      });\n      if (action == 0) localStorage.setItem('mainPage', \"false\");\n    }\n\n    getViewAndDeleteIfTrue(chatParticipant) {\n      return localStorage.getItem('userEmail') == chatParticipant.speaker;\n    }\n\n    onSubmit() {\n      console.log(\"Checking: \" + this.personForm.controls['name'].value); //for(let user of this.users) console.log(\"Users:\"+user.loggedIn);\n\n      for (var i = 0; i < this.userEmails.length; i++) {\n        if (this.personForm.controls['name'].value == this.userEmails[i] && this.personForm.controls['name'].value != localStorage.getItem('userEmail')) {\n          this.chatParticipantService.createChatCounter = 0;\n          console.log(\"There is such user!\");\n          console.log(\"ch:\", this.chatParticipants);\n          this.found = true;\n        }\n      } //console.log(localStorage.getItem('userEmail'));\n\n    }\n\n    createChat() {\n      this.chatParticipantService.createChatCounter++;\n      this.found = false;\n    }\n\n  }\n\n  ChatParticipantListComponent.ɵfac = function ChatParticipantListComponent_Factory(t) {\n    return new (t || ChatParticipantListComponent)(i0.ɵɵdirectiveInject(i1.ChatParticipantService));\n  };\n\n  ChatParticipantListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatParticipantListComponent,\n    selectors: [[\"app-chat-participant-list\"]],\n    viewQuery: function ChatParticipantListComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    inputs: {\n      headers: \"headers\",\n      chatParticipants: \"chatParticipants\"\n    },\n    outputs: {\n      chatParticipant: \"chatParticipant\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 16,\n    vars: 7,\n    consts: [[\"mat-table\", \"\", \"matSort\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\", \"hidden\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"matColumnDef\", \"actions\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", \"class\", \"chatParticipantsCell\", 4, \"matCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", \"class\", \"chatParticipantsRow\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"formControlName\", \"name\"], [\"type\", \"submit\"], [\"type\", \"submit\", 3, \"click\", 4, \"ngIf\"], [3, \"matColumnDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", \"class\", \"chatParticipantElement\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\", 1, \"chatParticipantElement\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\", 1, \"chatParticipantsCell\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 1, \"chatParticipantsRow\"], [\"type\", \"submit\", 3, \"click\"]],\n    template: function ChatParticipantListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0);\n        i0.ɵɵtemplate(1, ChatParticipantListComponent_ng_container_1_Template, 3, 1, \"ng-container\", 1);\n        i0.ɵɵelementContainerStart(2, 2);\n        i0.ɵɵtemplate(3, ChatParticipantListComponent_th_3_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(4, ChatParticipantListComponent_td_4_Template, 4, 2, \"td\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(5, ChatParticipantListComponent_tr_5_Template, 1, 0, \"tr\", 5);\n        i0.ɵɵtemplate(6, ChatParticipantListComponent_tr_6_Template, 1, 0, \"tr\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerStart(7);\n        i0.ɵɵelementStart(8, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function ChatParticipantListComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(9, \"label\", 8);\n        i0.ɵɵtext(10, \"Chat with: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵelementStart(12, \"button\", 10);\n        i0.ɵɵtext(13, \"Find\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, ChatParticipantListComponent_button_15_Template, 2, 0, \"button\", 11);\n        i0.ɵɵelementContainerEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"hidden\", ctx.chatParticipantService.createChatCounter != 2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headers);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.headerFields);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.headerFields);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.personForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.found);\n      }\n    },\n    directives: [i2.MatTable, i3.MatSort, i4.NgForOf, i2.MatColumnDef, i2.MatHeaderCellDef, i2.MatHeaderCell, i3.MatSortHeader, i2.MatCellDef, i2.MatCell, i4.NgIf, i5.MatButton, i6.MatIcon, i2.MatHeaderRowDef, i2.MatHeaderRow, i2.MatRowDef, i2.MatRow, i7.ɵNgNoValidate, i7.NgControlStatusGroup, i7.FormGroupDirective, i7.DefaultValueAccessor, i7.NgControlStatus, i7.FormControlName],\n    styles: [\"table[_ngcontent-%COMP%]{width:100%}.chatParticipantElement[_ngcontent-%COMP%]{padding-right:24px;padding-top:24px;padding-bottom:24px}.chatParticipantsRow[_ngcontent-%COMP%]{white-space:pre-line;min-height:48px;max-height:1030px}.chatParticipantsCell[_ngcontent-%COMP%]{min-height:48px;max-height:1030px}\"]\n  });\n  return ChatParticipantListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}