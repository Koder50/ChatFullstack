{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormGroup, FormControl } from \"@angular/forms\";\nlet ChatParticipantListComponent = class ChatParticipantListComponent {\n  constructor(chatParticipantService, blockedUsersListService) {\n    this.blockedUsersListService = blockedUsersListService;\n    this.headers = [];\n    this.chatParticipants = [];\n    this.chatParticipant = new EventEmitter();\n    this.headerFields = [];\n    this.users = [];\n    this.userEmails = [];\n    this.personForm = new FormGroup({\n      name: new FormControl()\n    });\n    this.found = false;\n    this.blockedForm = new FormGroup({\n      blocked: new FormControl()\n    });\n    this.blockedUsersListList = [];\n    this.chatParticipantService = chatParticipantService;\n    this.blockedUsersListService = blockedUsersListService;\n  }\n\n  ngOnChanges() {\n    //input is loading some time,here chatParticipants are not empty already after ngOnInit\n    if (this.chatParticipants != undefined && this.chatParticipants) {\n      let chatParticipantNotToDelete = this.chatParticipants.filter(data => {\n        return data.createdAt.slice(0, 13) == new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate(), new Date().getUTCHours(), new Date().getUTCMinutes(), new Date().getUTCSeconds())).toISOString().replace(\"T\", \" \").slice(0, 13);\n      });\n      chatParticipantNotToDelete = chatParticipantNotToDelete.filter(data => {\n        return data.speaker == localStorage.getItem(\"userEmail\") && data.chatWith == this.personForm.controls['name'].value || data.speaker == this.personForm.controls['name'].value && data.chatWith == localStorage.getItem(\"userEmail\");\n      });\n      this.dataSource = new MatTableDataSource(chatParticipantNotToDelete);\n      this.dataSource.sort = this.sort;\n      this.chatParticipantService.getUsers().subscribe(data => {\n        this.users = data;\n      });\n      let j = 0;\n\n      for (let user of this.users) {\n        this.userEmails[j] = user.email;\n        j++;\n      }\n\n      this.blockedUsersListService.getBlockedUsers().subscribe(data => {\n        this.blockedUsersListList = data;\n        console.log(this.blockedUsersListList[0].blockedUsersList[0]);\n      });\n    }\n  }\n\n  ngOnInit() {\n    this.getHeaderFields();\n    this.personForm.patchValue({\n      name: this.chatParticipantService.chatWith\n    });\n\n    for (let i = 0; i < this.blockedUsersListList.length; i++) {\n      if (this.blockedUsersListList[i].userEmail == localStorage.getItem('userEmail')) {\n        this.chatParticipantService.blocked = this.blockedUsersListList[i].blockedUsersList;\n        break;\n      }\n    }\n\n    this.blockedForm.patchValue({\n      blocked: this.chatParticipantService.blocked\n    });\n  }\n\n  getHeaderFields() {\n    this.headerFields = this.headers.map(data => data.fieldName);\n    this.headerFields.push(\"actions\");\n  }\n\n  selectChatParticipant(chatParticipant, action) {\n    if (localStorage.getItem(\"mainPage\") == \"true\") {\n      if (action == 0 && localStorage.getItem('userEmail') == chatParticipant.speaker || action == 1) this.chatParticipant.emit({\n        chatParticipant,\n        action\n      });\n      if (action == 0) localStorage.setItem('mainPage', \"false\");\n    }\n  }\n\n  getViewAndDeleteIfTrue(chatParticipant) {\n    return localStorage.getItem('userEmail') == chatParticipant.speaker;\n  }\n\n  onSubmit() {\n    for (var i = 0; i < this.userEmails.length; i++) {\n      //check if userEmail is registered and is not current logged user\n      if (this.personForm.controls['name'].value == this.userEmails[i] && this.personForm.controls['name'].value != localStorage.getItem('userEmail')) {\n        for (var j = 0; j < this.chatParticipantService.blocked.length; j++) {\n          if (this.chatParticipantService.blocked[j] == this.personForm.controls['name'].value) {\n            j = this.chatParticipantService.blocked.length;\n            i = this.userEmails.length;\n          } else if (j == this.chatParticipantService.blocked.length - 1) {\n            this.chatParticipantService.createChatCounter = 0;\n            this.found = true;\n            i = this.userEmails.length;\n          }\n        }\n\n        if (this.chatParticipantService.blocked.length == 0) {\n          this.chatParticipantService.createChatCounter = 0;\n          this.found = true;\n          i = this.userEmails.length;\n        }\n      }\n    }\n  }\n\n  createChat() {\n    this.chatParticipantService.chatWith = this.personForm.controls['name'].value;\n    this.chatParticipantService.createChatCounter++;\n    this.found = !this.found;\n  }\n\n  putBlockedList() {\n    if (this.blockedForm.controls['blocked'].value.includes(',')) this.chatParticipantService.blocked = this.blockedForm.controls['blocked'].value.split(',');else {\n      this.chatParticipantService.blocked = [];\n      this.chatParticipantService.blocked.push(this.blockedForm.controls['blocked'].value);\n    }\n  }\n\n};\n\n__decorate([Input()], ChatParticipantListComponent.prototype, \"headers\", void 0);\n\n__decorate([Input()], ChatParticipantListComponent.prototype, \"chatParticipants\", void 0);\n\n__decorate([Output()], ChatParticipantListComponent.prototype, \"chatParticipant\", void 0);\n\n__decorate([ViewChild(MatSort)], ChatParticipantListComponent.prototype, \"sort\", void 0);\n\nChatParticipantListComponent = __decorate([Component({\n  selector: 'app-chat-participant-list',\n  templateUrl: './chat-participant-list.component.html',\n  styleUrls: ['./chat-participant-list.component.scss']\n})], ChatParticipantListComponent);\nexport { ChatParticipantListComponent };","map":null,"metadata":{},"sourceType":"module"}