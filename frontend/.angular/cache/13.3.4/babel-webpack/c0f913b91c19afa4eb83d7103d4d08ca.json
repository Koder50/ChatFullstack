{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormGroup, FormControl } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/chat-participant.service\";\nimport * as i2 from \"src/app/blocked-users-list/services/blocked-users-list.service\";\nimport * as i3 from \"@angular/material/table\";\nimport * as i4 from \"@angular/material/sort\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\n\nfunction ChatParticipantListComponent_ng_container_1_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r6.headerName, \" \");\n  }\n}\n\nfunction ChatParticipantListComponent_ng_container_1_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r10 = ctx.$implicit;\n    const item_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r10[item_r6.fieldName], \" \");\n  }\n}\n\nfunction ChatParticipantListComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 14);\n    i0.ɵɵtemplate(1, ChatParticipantListComponent_ng_container_1_th_1_Template, 2, 1, \"th\", 15);\n    i0.ɵɵtemplate(2, ChatParticipantListComponent_ng_container_1_td_2_Template, 2, 1, \"td\", 16);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", item_r6.fieldName);\n  }\n}\n\nfunction ChatParticipantListComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 19);\n    i0.ɵɵtext(1, \" Actions \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatParticipantListComponent_td_4_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_td_4_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const element_r12 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.selectChatParticipant(element_r12, 0);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"pageview\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" View \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatParticipantListComponent_td_4_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_td_4_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const element_r12 = i0.ɵɵnextContext().$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.selectChatParticipant(element_r12, 1);\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" Delete \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatParticipantListComponent_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 20);\n    i0.ɵɵtemplate(1, ChatParticipantListComponent_td_4_button_1_Template, 4, 0, \"button\", 21);\n    i0.ɵɵtext(2, \" \\u00A0 \");\n    i0.ɵɵtemplate(3, ChatParticipantListComponent_td_4_button_3_Template, 4, 0, \"button\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const element_r12 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getViewAndDeleteIfTrue(element_r12));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getViewAndDeleteIfTrue(element_r12));\n  }\n}\n\nfunction ChatParticipantListComponent_tr_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 25);\n  }\n}\n\nfunction ChatParticipantListComponent_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 26);\n  }\n}\n\nfunction ChatParticipantListComponent_button_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_button_25_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.createChat();\n    });\n    i0.ɵɵtext(1, \"Create chat\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return {\n    \"chatMargin\": true\n  };\n};\n\nconst _c1 = function () {\n  return {\n    \"findMargin\": true\n  };\n};\n\nexport let ChatParticipantListComponent = /*#__PURE__*/(() => {\n  class ChatParticipantListComponent {\n    constructor(chatParticipantService, blockedUsersListService) {\n      this.headers = [];\n      this.chatParticipants = [];\n      this.chatParticipant = new EventEmitter();\n      this.headerFields = [];\n      this.users = [];\n      this.userEmails = [];\n      this.personForm = new FormGroup({\n        name: new FormControl()\n      });\n      this.found = false;\n      this.blockedForm = new FormGroup({\n        blocked: new FormControl()\n      });\n      this.blockedUsersListList = [];\n      this.blockedUsersListId = \"\";\n      this.chatParticipantService = chatParticipantService;\n      this.blockedUsersListService = blockedUsersListService;\n    }\n\n    ngOnChanges() {\n      //input is loading some time,here chatParticipants are not empty already after ngOnInit\n      if (this.chatParticipants != undefined && this.chatParticipants) {\n        let chatParticipantNotToDelete = this.chatParticipants.filter(data => {\n          return data.createdAt.slice(0, 13) == new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate(), new Date().getUTCHours(), new Date().getUTCMinutes(), new Date().getUTCSeconds())).toISOString().replace(\"T\", \" \").slice(0, 13);\n        });\n        chatParticipantNotToDelete = chatParticipantNotToDelete.filter(data => {\n          return data.speaker == localStorage.getItem(\"userEmail\") && data.chatWith == this.personForm.controls['name'].value || data.speaker == this.personForm.controls['name'].value && data.chatWith == localStorage.getItem(\"userEmail\");\n        });\n        this.dataSource = new MatTableDataSource(chatParticipantNotToDelete);\n        this.dataSource.sort = this.sort;\n        this.chatParticipantService.getUsers().subscribe(data => {\n          this.users = data;\n        });\n        let j = 0;\n\n        for (let user of this.users) {\n          this.userEmails[j] = user.email;\n          j++;\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.getHeaderFields();\n      this.personForm.patchValue({\n        name: this.chatParticipantService.chatWith\n      });\n      this.blockedUsersListService.getBlockedUsersLists().subscribe(data => {\n        if (data.length > 0) {\n          this.blockedUsersListList = data;\n\n          for (var i = 0; i < this.blockedUsersListList.length; i++) {\n            if (this.blockedUsersListList[i].userEmail == localStorage.getItem('userEmail')) {\n              this.chatParticipantService.blocked = this.blockedUsersListList[i].blockedUsersList;\n              this.blockedUsersListId = this.blockedUsersListList[i].id;\n              this.blockedUsersListObject = this.blockedUsersListList[i];\n              break;\n            }\n          }\n\n          this.blockedForm.patchValue({\n            blocked: this.chatParticipantService.blocked\n          });\n        }\n      });\n      setInterval(() => {\n        this.blockedUsersListService.getBlockedUsersLists().subscribe(data => {\n          if (data.length > 0) {\n            this.blockedUsersListList = data;\n\n            for (var i = 0; i < this.blockedUsersListList.length; i++) {\n              if (this.blockedUsersListList[i].userEmail == localStorage.getItem('userEmail')) {\n                this.chatParticipantService.blocked = this.blockedUsersListList[i].blockedUsersList;\n                this.blockedUsersListId = this.blockedUsersListList[i].id;\n                this.blockedUsersListObject = this.blockedUsersListList[i];\n                break;\n              }\n            }\n\n            let left = this.blockedForm.controls['blocked'].value;\n            let right = \"\";\n\n            for (let i = 0; i < this.chatParticipantService.blocked.length; i++) {\n              if (i != 0) right += \",\";\n              right += this.chatParticipantService.blocked[i];\n            }\n\n            let myBoolean = left == right;\n\n            if (!myBoolean) {\n              this.blockedForm.patchValue({\n                blocked: this.chatParticipantService.blocked\n              });\n              this.personForm.patchValue({\n                name: \"\"\n              });\n            }\n          }\n        });\n      }, 30000);\n    }\n\n    getHeaderFields() {\n      this.headerFields = this.headers.map(data => data.fieldName);\n      this.headerFields.push(\"actions\");\n    }\n\n    selectChatParticipant(chatParticipant, action) {\n      if (localStorage.getItem(\"mainPage\") == \"true\") {\n        if (action == 0 && localStorage.getItem('userEmail') == chatParticipant.speaker || action == 1) this.chatParticipant.emit({\n          chatParticipant,\n          action\n        });\n        if (action == 0) localStorage.setItem('mainPage', \"false\");\n      }\n    }\n\n    getViewAndDeleteIfTrue(chatParticipant) {\n      return localStorage.getItem('userEmail') == chatParticipant.speaker;\n    }\n\n    onSubmit() {\n      for (var i = 0; i < this.userEmails.length; i++) {\n        //check if userEmail is registered and is not current logged user\n        if (this.personForm.controls['name'].value == this.userEmails[i] && this.personForm.controls['name'].value != localStorage.getItem('userEmail')) {\n          for (var j = 0; j < this.chatParticipantService.blocked.length; j++) {\n            if (this.chatParticipantService.blocked[j] == this.personForm.controls['name'].value) {\n              j = this.chatParticipantService.blocked.length;\n              i = this.userEmails.length;\n            } else if (j == this.chatParticipantService.blocked.length - 1) {\n              this.chatParticipantService.createChatCounter = 0;\n              this.found = true;\n              i = this.userEmails.length;\n            }\n          }\n\n          if (this.chatParticipantService.blocked.length == 0) {\n            this.chatParticipantService.createChatCounter = 0;\n            this.found = true;\n            i = this.userEmails.length;\n          }\n        }\n      }\n    }\n\n    createChat() {\n      this.chatParticipantService.chatWith = this.personForm.controls['name'].value;\n      this.chatParticipantService.createChatCounter++;\n      this.found = !this.found;\n    }\n\n    putBlockedList() {\n      if (this.blockedForm.controls['blocked'].value.includes(',')) this.chatParticipantService.blocked = this.blockedForm.controls['blocked'].value.split(',');else {\n        this.chatParticipantService.blocked = [];\n        this.chatParticipantService.blocked.push(this.blockedForm.controls['blocked'].value);\n      }\n\n      if (this.blockedUsersListObject != null) {\n        this.blockedUsersListService.updateBlockedUsersList({\n          id: this.blockedUsersListObject.id,\n          userEmail: this.blockedUsersListObject.userEmail,\n          blockedUsersList: this.chatParticipantService.blocked\n        }).subscribe();\n      } else {\n        let tempUserEmail = \"\";\n        if (localStorage.getItem('userEmail') != null) tempUserEmail = localStorage.getItem('userEmail');else tempUserEmail = \"bad@mail.com\";\n        this.blockedUsersListService.addBlockedUsersList({\n          id: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n          userEmail: tempUserEmail,\n          blockedUsersList: this.chatParticipantService.blocked\n        }).subscribe();\n      }\n\n      let left = this.blockedForm.controls['blocked'].value;\n      let right = \"\";\n\n      for (let i = 0; i < this.chatParticipantService.blocked.length; i++) {\n        if (i != 0) right += \",\";\n        right += this.chatParticipantService.blocked[i];\n      }\n\n      this.blockedForm.patchValue({\n        blocked: this.chatParticipantService.blocked\n      });\n      this.personForm.patchValue({\n        name: \"\"\n      });\n    }\n\n  }\n\n  ChatParticipantListComponent.ɵfac = function ChatParticipantListComponent_Factory(t) {\n    return new (t || ChatParticipantListComponent)(i0.ɵɵdirectiveInject(i1.ChatParticipantService), i0.ɵɵdirectiveInject(i2.BlockedUsersListService));\n  };\n\n  ChatParticipantListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatParticipantListComponent,\n    selectors: [[\"app-chat-participant-list\"]],\n    viewQuery: function ChatParticipantListComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    inputs: {\n      headers: \"headers\",\n      chatParticipants: \"chatParticipants\"\n    },\n    outputs: {\n      chatParticipant: \"chatParticipant\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 26,\n    vars: 15,\n    consts: [[\"mat-table\", \"\", \"matSort\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"matColumnDef\", \"actions\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", \"class\", \"chatParticipantsCell\", 4, \"matCellDef\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", \"class\", \"chatParticipantsRow\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 3, \"ngClass\"], [\"matInput\", \"\", \"formControlName\", \"blocked\", \"placeholder\", \"Ex. student@mail.com,user@mail.com\", 3, \"input\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"placeholder\", \"Ex. student@mail.com\", 3, \"input\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"ngClass\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", 4, \"ngIf\"], [3, \"matColumnDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", \"class\", \"chatParticipantElement\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\", 1, \"chatParticipantElement\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\", 1, \"chatParticipantsCell\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 1, \"chatParticipantsRow\"]],\n    template: function ChatParticipantListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0);\n        i0.ɵɵtemplate(1, ChatParticipantListComponent_ng_container_1_Template, 3, 1, \"ng-container\", 1);\n        i0.ɵɵelementContainerStart(2, 2);\n        i0.ɵɵtemplate(3, ChatParticipantListComponent_th_3_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(4, ChatParticipantListComponent_td_4_Template, 4, 2, \"td\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(5, ChatParticipantListComponent_tr_5_Template, 1, 0, \"tr\", 5);\n        i0.ɵɵtemplate(6, ChatParticipantListComponent_tr_6_Template, 1, 0, \"tr\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerStart(7);\n        i0.ɵɵelementStart(8, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function ChatParticipantListComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(9, \"mat-form-field\", 8)(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Blocked users list: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 9);\n        i0.ɵɵlistener(\"input\", function ChatParticipantListComponent_Template_input_input_12_listener() {\n          return ctx.chatParticipantService.createChatCounter = 0;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(13, \"br\");\n        i0.ɵɵelementStart(14, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function ChatParticipantListComponent_Template_button_click_14_listener() {\n          return ctx.putBlockedList();\n        });\n        i0.ɵɵtext(15, \"Block users\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(16);\n        i0.ɵɵelementStart(17, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function ChatParticipantListComponent_Template_form_ngSubmit_17_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(18, \"mat-form-field\", 8)(19, \"mat-label\");\n        i0.ɵɵtext(20, \"Chat with: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 11);\n        i0.ɵɵlistener(\"input\", function ChatParticipantListComponent_Template_input_input_21_listener() {\n          return ctx.chatParticipantService.createChatCounter = 0;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵelementStart(23, \"button\", 12);\n        i0.ɵɵtext(24, \"Find\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, ChatParticipantListComponent_button_25_Template, 2, 0, \"button\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"hidden\", ctx.chatParticipantService.createChatCounter != 1);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headers);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.headerFields);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.headerFields);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.blockedForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(12, _c0));\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.personForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(13, _c0));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(14, _c1));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.found);\n      }\n    },\n    directives: [i3.MatTable, i4.MatSort, i5.NgForOf, i3.MatColumnDef, i3.MatHeaderCellDef, i3.MatHeaderCell, i4.MatSortHeader, i3.MatCellDef, i3.MatCell, i5.NgIf, i6.MatButton, i7.MatIcon, i3.MatHeaderRowDef, i3.MatHeaderRow, i3.MatRowDef, i3.MatRow, i8.ɵNgNoValidate, i8.NgControlStatusGroup, i8.FormGroupDirective, i9.MatFormField, i5.NgClass, i9.MatLabel, i10.MatInput, i8.DefaultValueAccessor, i8.NgControlStatus, i8.FormControlName],\n    styles: [\"table[_ngcontent-%COMP%]{width:100%}.chatParticipantElement[_ngcontent-%COMP%]{padding-right:24px;padding-top:24px;padding-bottom:24px}.chatParticipantsRow[_ngcontent-%COMP%]{white-space:pre-line;min-height:48px;max-height:1030px}.chatParticipantsCell[_ngcontent-%COMP%]{min-height:48px;max-height:1030px}.chatMargin[_ngcontent-%COMP%]{margin-top:10px}.findMargin[_ngcontent-%COMP%]{margin-right:10px}.hidden[_ngcontent-%COMP%]{display:none}\"]\n  });\n  return ChatParticipantListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}