{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY, forkJoin } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport { BlockedUsersListActions } from 'src/app/blocked-users-list/state/blocked-users-list.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/blocked-users-list/services/blocked-users-list.service\";\nexport let BlockedUsersListEffects = /*#__PURE__*/(() => {\n  class BlockedUsersListEffects {\n    constructor(actions$, router, blockedUsersListService) {\n      this.actions$ = actions$;\n      this.router = router;\n      this.blockedUsersListService = blockedUsersListService; // get list of chat participants in the external API\n      // set retrieved chat participant list in the state\n\n      this.getBlockedUsersLists$ = createEffect(() => {\n        return this.actions$.pipe(ofType(BlockedUsersListActions.GET_BLOCKED_USERS_LIST_LIST), mergeMap(() => this.blockedUsersListService.getBlockedUsersLists().pipe(map(blockedUsersLists => ({\n          type: BlockedUsersListActions.SET_BLOCKED_USERS_LIST_LIST,\n          blockedUsersLists\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // add chat-participants in the database\n\n      this.addBlockedUsersList$ = createEffect(() => {\n        return this.actions$.pipe(ofType(BlockedUsersListActions.ADD_BLOCKED_USERS_LIST_API), mergeMap(data => this.blockedUsersListService.addBlockedUsersList(data.payload).pipe(map(blockedUsersLists => ({\n          type: BlockedUsersListActions.ADD_BLOCKED_USERS_LIST_STATE,\n          blockedUsersList: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.modifyBlockedUsersList$ = createEffect(() => {\n        return this.actions$.pipe(ofType(BlockedUsersListActions.MODIFY_BLOCKED_USERS_LIST_API), mergeMap(data => {\n          console.log('W-1');\n          this.blockedUsersListService.updateBlockedUsersList(data.payload);\n        }, pipe(tap(() => {\n          console.log('W0');\n        }), map(blockedUsersLists => ({\n          type: BlockedUsersListActions.MODIFY_BLOCKED_USERS_LIST_STATE,\n          blockedUsersList: data.payload\n        })), tap(() => {\n          console.log('W1');\n          this.router.navigate([\"blocked-users-lists\"]);\n        }), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove chat-participants in the database\n\n      this.removeBlockedUsersList$ = createEffect(() => {\n        return this.actions$.pipe(ofType(BlockedUsersListActions.REMOVE_BLOCKED_USERS_LIST_API), mergeMap(data => this.blockedUsersListService.deleteBlockedUsersList(data.payload).pipe(map(() => ({\n          type: BlockedUsersListActions.REMOVE_BLOCKED_USERS_LIST_STATE,\n          blockedUsersListId: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove all chat-participants in the database\n\n      this.removeAllBlockedUsersList$ = createEffect(() => {\n        return this.actions$.pipe(ofType(BlockedUsersListActions.REMOVE_ALL_BLOCKED_USERS_LIST_API), mergeMap(data => forkJoin([...data.payload.map(id => this.blockedUsersListService.deleteBlockedUsersList(id))]).pipe(map(() => ({\n          type: BlockedUsersListActions.REMOVE_ALL_BLOCKED_USERS_LIST_STATE\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n    }\n\n  }\n\n  BlockedUsersListEffects.ɵfac = function BlockedUsersListEffects_Factory(t) {\n    return new (t || BlockedUsersListEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.BlockedUsersListService));\n  };\n\n  BlockedUsersListEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BlockedUsersListEffects,\n    factory: BlockedUsersListEffects.ɵfac\n  });\n  return BlockedUsersListEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}