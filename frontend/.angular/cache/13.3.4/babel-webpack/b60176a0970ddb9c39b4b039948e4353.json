{"ast":null,"code":"import { CommandBarActions } from '../../enums/command-bar-actions.enum';\nimport { TableActions } from '../../enums/table-actions.enum';\nimport { ChatParticipantActions } from '../../state/chat-participant.actions';\nimport { selectChatParticipants } from '../../state/chat-participant.selectors';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../../services/chat-participant.service\";\nimport * as i4 from \"../../components/chat-participant-command-bar/chat-participant-command-bar.component\";\nimport * as i5 from \"../../components/chat-participant-list/chat-participant-list.component\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\n\nfunction ListComponent_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function ListComponent_button_11_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.createChat();\n    });\n    i0.ɵɵtext(1, \"Create chat\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return {\n    \"chatMargin\": true\n  };\n};\n\nconst _c1 = function () {\n  return {\n    \"findMargin\": true\n  };\n};\n\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(router, store, chatParticipantService) {\n      this.router = router;\n      this.store = store; // sample data of anti hero\n\n      this.chatParticipants = [];\n      this.chatParticipants$ = this.store.select(selectChatParticipants());\n      this.subscription = Subscription.EMPTY;\n      this.headers = [{\n        headerName: \"Speaker\",\n        fieldName: \"speaker\"\n      }, {\n        headerName: \"Content\",\n        fieldName: \"talkContent\"\n      }, {\n        headerName: \"CreatedAt\",\n        fieldName: \"createdAt\"\n      }, {\n        headerName: \"ChatWith\",\n        fieldName: \"chatWith\"\n      }];\n      this.chatParticipantsToDelete = [];\n      this.personForm = new FormGroup({\n        name: new FormControl()\n      });\n      this.found = false;\n      this.chatParticipantService = chatParticipantService;\n    }\n\n    ngOnInit() {\n      localStorage.setItem(\"mainPage\", 'true');\n      localStorage.setItem('refresh', 'true');\n      this.store.dispatch({\n        type: ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST\n      });\n      this.assignChatParticipants();\n      this.deleteTooOldPosts();\n      setInterval(() => {\n        if (localStorage.getItem(\"mainPage\") == \"true\" && localStorage.getItem(\"refresh\") == 'true') {\n          this.deleteTooOldPosts();\n          this.store.dispatch({\n            type: ChatParticipantActions.GET_CHAT_PARTICIPANT_LIST\n          });\n        }\n      }, 5000);\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n    assignChatParticipants() {\n      this.subscription = this.chatParticipants$.subscribe(data => {\n        for (let i = 0; i < data.length; i++) {\n          //just works, deletes not demanded undefined objects\n          if (data[i].createdAt == undefined) data.splice(i, 1);\n        }\n\n        this.chatParticipants = data;\n      });\n    }\n\n    selectChatParticipant(data) {\n      switch (data.action) {\n        case TableActions.View:\n          {\n            this.router.navigate(['chat-participants', 'form', data.chatParticipant.id]);\n            return;\n          }\n\n        case TableActions.Delete:\n          {\n            this.store.dispatch({\n              type: ChatParticipantActions.REMOVE_CHAT_PARTICIPANT_API,\n              payload: data.chatParticipant.id\n            });\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n    executeCommandBarAction(action) {\n      switch (action) {\n        case CommandBarActions.Create:\n          {\n            this.router.navigate([\"chat-participants\", \"form\"]);\n            return;\n          }\n\n        case CommandBarActions.DeleteAll:\n          {\n            this.store.dispatch({\n              type: ChatParticipantActions.REMOVE_ALL_CHAT_PARTICIPANT_API,\n              payload: [...this.chatParticipants.map(d => d.id)]\n            });\n            return;\n          }\n\n        case CommandBarActions.Logout:\n          {\n            localStorage.removeItem('token');\n            localStorage.removeItem('userEmail');\n            this.refresh();\n            return;\n          }\n\n        case CommandBarActions.Refresh:\n          {\n            if (localStorage.getItem('refresh') == 'true') localStorage.setItem('refresh', 'false');else localStorage.setItem('refresh', 'true');\n            return;\n          }\n\n        default:\n          \"\";\n      }\n    }\n\n    refresh() {\n      window.location.reload();\n    }\n\n    deleteTooOldPosts() {\n      if (this.chatParticipants != undefined && this.chatParticipants.length > 0) {\n        this.chatParticipantsToDelete = this.chatParticipants.filter(data => data.createdAt.slice(0, 13) != new Date(Date.UTC(new Date().getUTCFullYear(), new Date().getUTCMonth(), new Date().getUTCDate(), new Date().getUTCHours(), new Date().getUTCMinutes(), new Date().getUTCSeconds())).toISOString().replace(\"T\", \" \").slice(0, 13));\n\n        for (let i = 0; i < this.chatParticipantsToDelete.length; i++) {\n          this.store.dispatch({\n            type: ChatParticipantActions.REMOVE_CHAT_PARTICIPANT_API,\n            payload: this.chatParticipantsToDelete[i].id\n          });\n        }\n      }\n    }\n\n    onSubmit() {\n      for (var i = 0; i < this.userEmails.length; i++) {\n        //check if userEmail is registered and is not current logged user\n        if (this.personForm.controls['name'].value == this.userEmails[i] && this.personForm.controls['name'].value != localStorage.getItem('userEmail')) {\n          this.chatParticipantService.createChatCounter = 0;\n          this.found = true;\n          break;\n        }\n      }\n    }\n\n    createChat() {\n      this.chatParticipantService.createChatCounter++;\n      this.found = !this.found;\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i3.ChatParticipantService));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"app-list\"]],\n    decls: 12,\n    vars: 10,\n    consts: [[3, \"action\"], [3, \"chatParticipants\", \"headers\", \"chatParticipant\"], [3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 3, \"ngClass\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"placeholder\", \"Ex. student@mail.com\", 3, \"change\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"ngClass\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-chat-participant-command-bar\", 0);\n        i0.ɵɵlistener(\"action\", function ListComponent_Template_app_chat_participant_command_bar_action_0_listener($event) {\n          return ctx.executeCommandBarAction($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"app-chat-participant-list\", 1);\n        i0.ɵɵlistener(\"chatParticipant\", function ListComponent_Template_app_chat_participant_list_chatParticipant_1_listener($event) {\n          return ctx.selectChatParticipant($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerStart(2);\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function ListComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"mat-form-field\", 3)(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Chat with: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function ListComponent_Template_input_change_7_listener() {\n          return ctx.chatParticipantService.createChatCounter = 0;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵtext(10, \"Find\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, ListComponent_button_11_Template, 2, 0, \"button\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementContainerEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"hidden\", ctx.chatParticipantService.createChatCounter != 1);\n        i0.ɵɵproperty(\"chatParticipants\", ctx.chatParticipants)(\"headers\", ctx.headers);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.personForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(8, _c0));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(9, _c1));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.found);\n      }\n    },\n    directives: [i4.ChatParticipantCommandBarComponent, i5.ChatParticipantListComponent, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.MatFormField, i8.NgClass, i7.MatLabel, i9.MatInput, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlName, i10.MatButton, i8.NgIf],\n    styles: [\"button[_ngcontent-%COMP%]{margin-right:10px}.hidden[_ngcontent-%COMP%]{display:none}.chatMargin[_ngcontent-%COMP%]{margin-top:10px}.findMargin[_ngcontent-%COMP%]{margin-right:10px}\"]\n  });\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}